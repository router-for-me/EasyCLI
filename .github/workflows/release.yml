name: Release on Tag

on:
    push:
        tags:
            - 'v*'
    workflow_dispatch:
        inputs:
            only:
                description: "Run only one target (all/windows-x64/windows-arm64/linux-amd64/darwin-x64/darwin-arm64)"
                required: false
                default: all
                type: choice
                options:
                    - all
                    - windows-x64
                    - windows-arm64
                    - linux-amd64
                    - darwin-x64
                    - darwin-arm64

jobs:
    create_release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        # Create a GitHub Release only on tag pushes; skip for manual runs
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Create release for tag
              id: gh-release
              uses: softprops/action-gh-release@v2
              with:
                  name: Release ${{ github.ref_name }}
                  tag_name: ${{ github.ref_name }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        outputs:
            release_id: ${{ steps.gh-release.outputs.id }}

    build:
        name: Tauri Build (${{ matrix.os }} - ${{ matrix.arch_label }})
        # Selection is handled at step level via env.SELECTED
        runs-on: ${{ matrix.os }}
        env:
            SELECTED: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.only == 'all' || github.event.inputs.only == '' || github.event.inputs.only == format('{0}-{1}', matrix.os_name, matrix.arch_label) }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    # Linux (amd64 only for now)
                    - os: ubuntu-latest
                      os_name: linux
                      arch_label: amd64
                      target: x86_64-unknown-linux-gnu
                      bundles: deb
                    # Windows
                    - os: windows-latest
                      os_name: windows
                      arch_label: x64
                      target: x86_64-pc-windows-msvc
                      artifact_suffix: windows-x64
                      single_bundle: true
                    - os: windows-latest
                      os_name: windows
                      arch_label: arm64
                      target: aarch64-pc-windows-msvc
                      artifact_suffix: windows-arm64
                      single_bundle: true
                    # macOS
                    - os: macos-15-intel
                      os_name: darwin
                      arch_label: x64
                      target: x86_64-apple-darwin
                      bundles: dmg
                    - os: macos-14
                      os_name: darwin
                      arch_label: arm64
                      target: aarch64-apple-darwin
                      bundles: dmg

        steps:
            - name: Checkout
              if: env.SELECTED == 'true'
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              if: env.SELECTED == 'true'
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'

            - name: Install Rust toolchain
              if: env.SELECTED == 'true'
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install Linux dependencies
              if: env.SELECTED == 'true' && runner.os == 'Linux'
              shell: bash
              run: |
                  set -euo pipefail
                  sudo apt-get update
                  # Detect available webkit2gtk dev package by version
                  PKG_WEBKIT="libwebkit2gtk-4.1-dev"
                  if ! apt-cache show "$PKG_WEBKIT" >/dev/null 2>&1; then
                    PKG_WEBKIT="libwebkit2gtk-4.0-dev"
                  fi
                  sudo apt-get install -y \
                    libgtk-3-dev \
                    "$PKG_WEBKIT" \
                    libayatana-appindicator3-dev \
                    librsvg2-dev \
                    patchelf

            - name: Install frontend deps
              if: env.SELECTED == 'true'
              run: npm ci

            - name: Install create-dmg (macOS)
              if: env.SELECTED == 'true' && runner.os == 'macOS'
              run: |
                  brew update
                  brew install create-dmg || true

            - name: Build with Tauri Action
              if: env.SELECTED == 'true'
              uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
              with:
                  includeDebug: false
                  args: >
                      --target ${{ matrix.target }}
                      ${{ matrix.bundles && format('--bundles {0}', matrix.bundles) }}

            - name: Setup artifact folder
              if: env.SELECTED == 'true'
              shell: bash
              run: |
                  mkdir -p release-out

            - name: Collect and rename artifacts (macOS)
              if: env.SELECTED == 'true' && runner.os == 'macOS'
              shell: bash
              run: |
                  set -euo pipefail
                  TAG=${{ github.ref_name }}
                  shopt -s nullglob
                  for f in src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg; do
                    base="EasyCLI-${TAG}-${{ matrix.os_name }}-${{ matrix.arch_label }}.dmg"
                    cp "$f" "release-out/$base"
                    echo "Packaged $f -> release-out/$base"
                  done

            - name: Collect and rename artifacts (Windows)
              if: env.SELECTED == 'true' && runner.os == 'Windows'
              shell: powershell
              run: |
                  $ErrorActionPreference = 'Stop'
                  $tag = "${{ github.ref_name }}"
                  $base = "EasyCLI-$tag-${{ matrix.artifact_suffix }}"
                  $exeSrc = "src-tauri/target/${{ matrix.target }}/release/easycli.exe"
                  $dllSrc = "src-tauri/target/${{ matrix.target }}/release/WebView2Loader.dll"
                  $destDir = "release-out"
                  $destZip = Join-Path $destDir "$base.zip"

                  if (-not (Test-Path $exeSrc)) {
                    Write-Error "Windows executable not found: $exeSrc"
                  }

                  # Ensure destination exists
                  New-Item -ItemType Directory -Force -Path $destDir | Out-Null

                  $files = @()
                  $tmpDirPath = Join-Path ([System.IO.Path]::GetTempPath()) ([System.IO.Path]::GetRandomFileName())
                  New-Item -ItemType Directory -Path $tmpDirPath | Out-Null
                  try {
                    $exeDest = Join-Path $tmpDirPath "$base.exe"
                    Copy-Item $exeSrc $exeDest
                    $files += $exeDest

                    if (Test-Path $dllSrc) {
                      $dllDest = Join-Path $tmpDirPath "WebView2Loader.dll"
                      Copy-Item $dllSrc $dllDest
                      $files += $dllDest
                    }

                    if (Test-Path $destZip) {
                      Remove-Item $destZip
                    }
                    Compress-Archive -Path $files -DestinationPath $destZip
                    Write-Output "Packaged Windows artifacts -> $destZip"
                  }
                  finally {
                    if ($null -ne $tmpDirPath -and (Test-Path $tmpDirPath)) {
                      Remove-Item $tmpDirPath -Recurse -Force
                    }
                  }

            - name: Collect and rename artifacts (Linux)
              if: env.SELECTED == 'true' && runner.os == 'Linux'
              shell: bash
              run: |
                  set -euo pipefail
                  TAG=${{ github.ref_name }}
                  shopt -s nullglob
                  for f in src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb; do
                    base="EasyCLI-${TAG}-${{ matrix.os_name }}-${{ matrix.arch_label }}.deb"
                    cp "$f" "release-out/$base"
                    echo "Packaged $f -> release-out/$base"
                  done

            - name: Upload to GitHub Release
              uses: softprops/action-gh-release@v2
              if: env.SELECTED == 'true' && startsWith(github.ref, 'refs/tags/')
              with:
                  tag_name: ${{ github.ref_name }}
                  files: |
                      release-out/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

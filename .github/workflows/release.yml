name: Release on Tag

on:
    push:
        tags:
            - 'v*'
    workflow_dispatch:

jobs:
    create_release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        steps:
            - name: Create release for tag
              id: gh-release
              uses: softprops/action-gh-release@v2
              with:
                  name: Release ${{ github.ref_name }}
                  tag_name: ${{ github.ref_name }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        outputs:
            release_id: ${{ steps.gh-release.outputs.id }}

    build:
        name: Tauri Build (${{ matrix.os }} - ${{ matrix.arch_label }})
        needs: create_release
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    # Linux (amd64 only for now)
                    - os: ubuntu-latest
                      os_name: linux
                      arch_label: amd64
                      target: x86_64-unknown-linux-gnu
                      bundles: deb
                    # Windows
                    - os: windows-latest
                      os_name: windows
                      arch_label: x64
                      target: x86_64-pc-windows-msvc
                      bundles: nsis
                    - os: windows-latest
                      os_name: windows
                      arch_label: aarch64
                      target: aarch64-pc-windows-msvc
                      bundles: nsis
                    # macOS
                    - os: macos-15-intel
                      os_name: darwin
                      arch_label: x64
                      target: x86_64-apple-darwin
                      bundles: dmg
                    - os: macos-14
                      os_name: darwin
                      arch_label: aarch64
                      target: aarch64-apple-darwin
                      bundles: dmg

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install Linux dependencies
              if: runner.os == 'Linux'
              shell: bash
              run: |
                  set -euo pipefail
                  sudo apt-get update
                  # Detect available webkit2gtk dev package by version
                  PKG_WEBKIT="libwebkit2gtk-4.1-dev"
                  if ! apt-cache show "$PKG_WEBKIT" >/dev/null 2>&1; then
                    PKG_WEBKIT="libwebkit2gtk-4.0-dev"
                  fi
                  sudo apt-get install -y \
                    libgtk-3-dev \
                    "$PKG_WEBKIT" \
                    libayatana-appindicator3-dev \
                    librsvg2-dev \
                    patchelf

            - name: Install frontend deps
              run: npm ci

            - name: Install create-dmg (macOS)
              if: runner.os == 'macOS'
              run: |
                  brew update
                  brew install create-dmg || true

            - name: Build with Tauri Action
              uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
              with:
                  includeDebug: false
                  args: --target ${{ matrix.target }} --bundles ${{ matrix.bundles }}

            - name: Setup artifact folder
              shell: bash
              run: |
                  mkdir -p release-out

            - name: Collect and rename artifacts (macOS)
              if: runner.os == 'macOS'
              shell: bash
              run: |
                  set -euo pipefail
                  TAG=${{ github.ref_name }}
                  shopt -s nullglob
                  for f in src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg; do
                    base="CLIProxyAPIGUI-${TAG}-${{ matrix.os_name }}-${{ matrix.arch_label }}.dmg"
                    cp "$f" "release-out/$base"
                    echo "Packaged $f -> release-out/$base"
                  done

            - name: Collect and rename artifacts (Windows)
              if: runner.os == 'Windows'
              shell: bash
              run: |
                  set -euo pipefail
                  TAG=${{ github.ref_name }}
                  shopt -s nullglob
                  for f in src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe; do
                    base="CLIProxyAPIGUI-${TAG}-${{ matrix.os_name }}-${{ matrix.arch_label }}-setup.exe"
                    cp "$f" "release-out/$base"
                    echo "Packaged $f -> release-out/$base"
                  done
                  for f in src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi; do
                    base="CLIProxyAPIGUI-${TAG}-${{ matrix.os_name }}-${{ matrix.arch_label }}.msi"
                    cp "$f" "release-out/$base"
                    echo "Packaged $f -> release-out/$base"
                  done

            - name: Collect and rename artifacts (Linux)
              if: runner.os == 'Linux'
              shell: bash
              run: |
                  set -euo pipefail
                  TAG=${{ github.ref_name }}
                  shopt -s nullglob
                  for f in src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb; do
                    base="CLIProxyAPIGUI-${TAG}-${{ matrix.os_name }}-${{ matrix.arch_label }}.deb"
                    cp "$f" "release-out/$base"
                    echo "Packaged $f -> release-out/$base"
                  done

            - name: Upload to GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref_name }}
                  files: |
                      release-out/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}